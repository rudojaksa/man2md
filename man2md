#!/usr/bin/perl
# Copyleft: R.Jaksa 2018, GNU General Public License version 3

$PACKAGE="man2md";
$VERSION="0.1";
$PROJECT="webutils";
$COPYLEFT="(c) R.Jaksa 2018 GPLv3";

# ---------------------------------------------------------------------- COLORS

$CR_="\033[31m"; # color red
$CG_="\033[32m"; # color green
$CY_="\033[33m"; # color yellow
$CB_="\033[34m"; # color blue
$CM_="\033[35m"; # color magenta
$CC_="\033[36m"; # color cyan
$CW_="\033[37m"; # color white
$CK_="\033[90m"; # color black
$CP_="\033[91m"; # color pink
$CL_="\033[92m"; # color lime
$CS_="\033[93m"; # color sulphur yellow
$CZ_="\033[94m"; # color azure
$CO_="\033[95m"; # color orchid
$CA_="\033[96m"; # color aqua cyan
$CF_="\033[97m"; # color fluorescent white
$CD_="\033[0m";  # color default

# -----------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------- FUNCS

# inar(\@a,$s) - check whether the string is in the array
sub inar {
  my $a=$_[0]; # array ref
  my $s=$_[1]; # string
  foreach(@{$a}) { return 1 if $_ eq $s; }
  return 0; }

# pushq(\@a,$s) - push unique, only if not there
sub pushq {
  my $a=$_[0]; # array ref
  my $s=$_[1]; # string
  return if inar $a,$s;
  push @{$a},$s; }

# return file name from path
sub fname {
  my $fname = $_[0];
  $fname =~ s/^.*\///;
  return $fname; }
# return directory part of path
sub dirname { return $1 if $_[0] =~ /^(.*)\/[^\/]*$/; }

# writefile
sub writefile {
  my $file = $_[0];
  my $s    = $_[1];
  my $dir  = dirname $file;
  mkdir $dir if not -d $dir;
  open(O,">$file") or die "Can't create file $CG_$file$CD_ $CR_($!)$CD_."; 
  print O $s;
  close(O); }

# read the first line
sub firstline {
  my $file = $_[0];
  my $s;
  open(FILE,"<$file") or die "Can't read file $CG_$file$CD_ $CR_($!)$CD_."; 
  $s = <FILE>;
  close(FILE);
  return $s; }

# ---------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------ HELP
my $helpdebug=<<EOF;
DEBUG
    Debug messages can be switched on/off by strains.
    Available strains are:
    ${CC_}_STRAINS_$CD_.

    $CC_-d STRAIN$CC_\[,STRAIN...\]$CD_ Debug only specified strains.
    $CC_-d -STRAIN$CD_ Prefix the strain with "-" to avoid it.
EOF
# -----------------------------------------------------------------------------------------

sub printhelp {
  my $help = $_[0];
  my $PR = qr/(\(((?:[^()]|(?-2))*)\))/x;

#  my $debug_strains = debug_strains_list();
#  $debug_strains =~ s/, /$CD_, $CC_/g;
  $help =~ s/_DEBUG_\n/$helpdebug/;
  $help =~ s/_STRAINS_/$debug_strains/;

  $help.="VERSION\n    $PACKAGE-$VERSION $COPYLEFT\n\n";

  # CC(text)
  $help =~ s/\\\)/__CLPA__/g; # use '\\)' instead of closing paren in the $HELP
  $help =~ s/([^A-Z0-9])CC$PR/$1$CC_$3$CD_/g;
  $help =~ s/([^A-Z0-9])CW$PR/$1$CW_$3$CD_/g;
  $help =~ s/([^A-Z0-9])CK$PR/$1$CK_$3$CD_/g;
  $help =~ s/([^A-Z0-9])CD$PR/$1$CD_$3$CD_/g;
  $help =~ s/__CLPA__/)/g;

  # TODO: use push array to avoid being overwritten later
  $help =~ s/(\n[ ]*)(-[a-zA-Z0-9]+(\[?[ =][A-Z]{2,}(x[A-Z]{2,})?\]?)?)([ \t])/$1$CC_$2$CD_$5/g;

  $help =~ s/\[([+-])?([A-Z]+)\]/\[$1$CC_$2$CD_\]/g;
  $help =~ s/(\n|[ \t])(([A-Z_\/-]+[ ]?){4,})/$1$CC_$2$CD_/g;

  print $help; }

# -----------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------- HELP

$HELP=<<EOF;

NAME
    man2md - man to (github) markdown convertor

USAGE
    man topic > topic.txt
    man2md topic.txt > topic.md

    or:
    man topic | man2md

DESCRIPTION
    Man2md just converts manpage or an interactive help, if it is man-like
    formatted, into the markdown format suitable for the github README.md.

OPTIONS
    -h  This help.

EOF

# ------------------------------------------------------------------------------ ARGVS
foreach(@ARGV) { if($_ eq "-h") { printhelp $HELP; exit 0; }}

our $INPUT;
foreach(@ARGV) {
  next if $_ eq "";
  if(-f $_) { $INPUT=$_; $_=""; last; }}

# ------------------------------------------------------------------------------ INPUT

if(defined $INPUT) {
  $RAW = `cat $INPUT`; }

else {
  while(<STDIN>) {
    $RAW .= "$_"; }}

# ---------------------------------------------------------------------- PREPROCESSING

# remove color escape sequences
$RAW =~ s/\033\[36m//g;	# cyan
$RAW =~ s/\033\[37m//g;	# white
$RAW =~ s/\033\[90m//g;	# black
$RAW =~ s/\033\[0m//g;	# default

# titles
$RAW =~ s/\n([A-Z])/\n\#\#\# $1/g;
$RAW =~ s/\n([A-Za-z0-9-]+(\h+[A-Za-z0-9-]+)?(\h+[A-Za-z0-9-]+)?:)/\n\#\#\#\# $1/g;

# multiple newlines
$RAW =~ s/\n\h*\n\h*(\n\h*)+/\n\n/g;

# --------------------------------------------------------------------- SPLIT SECTIONS

# split into sections
our @HEAD; # header text
our %HDPX; # header prefix
our %BODY; # section body
sub addsec { push @HEAD,$_[0]; $HDPX{$_[0]} = $_[1]; $BODY{$_[0]} = $_[2]; }

my $head; # current header
my $hdpx; # header prefix
my $body; # current body
foreach my $s (split /\n/,$RAW) {

  # header => store past section
  if($s =~ /^(\#\#*) (.*)\h*$/) {
    addsec $head,$hdpx,$body and undef $body if defined $head and defined $body;
    $head = $2;
    $hdpx = $1; }

  # just line
  else {
    $body .= "$s\n" if defined $head; }} # store the body only for recognized head

addsec $head,$hdpx,$body if defined $head and defined $body;
# print "$_\n$BODY{$_}" foreach @HEAD; exit 1;

# --------------------------------------------------------------------- SECTIONS TYPES

# list of sections always treated as regular
$REG=<<EOF;
NAME
DESCRIPTION
VERSION
AUTHOR
REPORTING BUGS
COPYRIGHT
SEE ALSO
EOF

# list of sections always treated as preformatted
$PRE=<<EOF;
USAGE
OPTIONS
SYNOPSIS
EXAMPLES
EXAMPLE
EOF

our @REG = split /\n/,$REG;
our @PRE = split /\n/,$PRE;

our %TYPE; # 1=REG 2=PRE
foreach my $h (@HEAD) {
  if(inar \@REG,$h) { $TYPE{$h}=1; } # always regular
  elsif(inar \@PRE,$h) { $TYPE{$h}=2; } # always preformatted
  elsif($BODY{$h}=~/(^|\n)\h*-[a-zA-Z0-9]/) { $TYPE{$h}=2; } # seems, list of options included
  elsif($BODY{$h}=~/(^|\n)\h*+[a-zA-Z0-9]/) { $TYPE{$h}=2; } # seems, list of + options included
  else { $TYPE{$h}=1; }} # default regular
# print "$_ $TYPE{$_}\n" foreach @HEAD;

# ----------------------------------------------------------------- INDENTATION PREFIX

my $ind = 1000; # total minimal indentation level
foreach my $h (@HEAD) {
  next if not $TYPE{$h} == 2;
  foreach my $s (split /\n/,$BODY{$h}) {
    next if $s =~ /^\h*$/; # skip empty lines
    if($s =~ /^( *)/) {
      my $len = length $1;
      $ind = $len if $len < $ind; }}}

my $px = ""; # required prefix to maintain minimal indentatiot to be four
for(my $i=0; $i<4-$ind; $i++) { $px.=" "; }
# print "max ind: $ind\n";

# -------------------------------------------------------------------- ASSEMBLE OUTPUT

our $OUT; # output string
foreach my $h (@HEAD) {

  # header
  $OUT .= "$HDPX{$h} $h\n";

  # regular text
  if($TYPE{$h} == 1) {
    my $sp; # indentation space in current regular section input
    foreach my $s (split /\n/,$BODY{$h}) {
      $sp = $1 if not defined $sp and $s=~/^( *)[^ ]/; # only for 1st line
      $s =~ s/^$sp//; # remove indentation here
      $OUT .= "$s\n"; }}
      
  # preformatted text
  elsif($TYPE{$h} == 2) {
    foreach my $s (split /\n/,$BODY{$h}) {
      $OUT .= "$px$s\n"; }}

  $OUT .= "\n"; }

# ----------------------------------------------------------------------------- OUTPUT

print "$OUT";

# ------------------------------------------------------------------------------------
